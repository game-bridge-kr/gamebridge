# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2023-07-19T03:35:33+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, constr


class Billing(BaseModel):
    id: Optional[float] = Field(None, description='ID of the billing history item')
    date: Optional[str] = Field(
        None, description='Date billing history item was generated'
    )
    type: Optional[str] = Field(None, description='Type of billing history item')
    description: Optional[str] = Field(
        None, description='Description of billing history item'
    )
    amount: Optional[float] = Field(
        None, description='Amount for the billing history item in dollars'
    )
    balance: Optional[float] = Field(
        None, description='The accounts balance in dollars'
    )


class Invoice(BaseModel):
    id: Optional[int] = Field(None, description='ID of the invoice')
    date: Optional[str] = Field(None, description='Date invoice was generated')
    description: Optional[str] = Field(None, description='description of item')
    amount: Optional[float] = Field(None, description='Amount due in dollars')
    balance: Optional[float] = Field(
        None, description='Account balance amount in dollars'
    )


class NodepoolInstances(BaseModel):
    id: Optional[str] = Field(None, description='ID of the nodepool instance')
    label: Optional[str] = Field(None, description='Label of the nodepool instance')
    date_created: Optional[str] = Field(None, description='Date of creation')


class Nodepools(BaseModel):
    id: Optional[str] = Field(
        None, description='The [NodePool ID](#operation/get-nodepools).'
    )
    date_created: Optional[str] = Field(None, description='Date of creation')
    label: Optional[str] = Field(None, description='Label for nodepool')
    tag: Optional[str] = Field(None, description='Tag for node pool')
    plan: Optional[str] = Field(None, description='Plan used for nodepool')
    status: Optional[str] = Field(None, description='Status for nodepool')
    node_quantity: Optional[int] = Field(
        None, description='Number of nodes in nodepool'
    )
    nodes: Optional[List[NodepoolInstances]] = None
    date_updated: Optional[str] = Field(
        None, description='Date the nodepool was updated.'
    )
    auto_scaler: Optional[bool] = Field(
        None,
        description='Displays if the auto scaler is enabled or disabled for your cluster.',
    )
    min_nodes: Optional[int] = Field(
        None,
        description='Auto scaler field that displays the minimum nodes you want for your cluster.',
    )
    max_nodes: Optional[int] = Field(
        None,
        description='Auto scaler field that displays the maximum nodes you want for your cluster.',
    )


class Network(BaseModel):
    id: str = Field(..., description='A unique ID for the Private Network.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the network is located.',
    )
    date_created: Optional[str] = Field(
        None, description='Date the network was created.'
    )
    description: Optional[str] = Field(
        None, description='A description of the private network.'
    )
    v4_subnet: Optional[str] = Field(
        None, description='The IPv4 network address. For example: 10.99.0.0'
    )
    v4_subnet_mask: Optional[int] = Field(
        None,
        description='The number of bits for the netmask in CIDR notation. Example: 24',
    )


class Vpc(BaseModel):
    id: str = Field(..., description='A unique ID for the VPC.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the VPC is located.',
    )
    date_created: Optional[str] = Field(None, description='Date the VPC was created.')
    description: Optional[str] = Field(None, description='A description of the VPC.')
    v4_subnet: Optional[str] = Field(
        None, description='The IPv4 VPC address. For example: 10.99.0.0'
    )
    v4_subnet_mask: Optional[int] = Field(
        None,
        description='The number of bits for the netmask in CIDR notation. Example: 24',
    )


class User1(BaseModel):
    id: Optional[str] = Field(None, description="The User's id.")
    name: Optional[str] = Field(None, description="The User's name.")
    api_enabled: Optional[bool] = Field(
        None, description='Permit API access for this User.\n\n* true\n* false'
    )
    email: Optional[str] = Field(None, description="The User's email address.")
    password: Optional[str] = Field(None, description="The User's password.")
    acls: Optional[List[str]] = Field(
        None,
        description='An array of permission granted.\n\n* abuse\n* alerts\n* billing\n* dns\n* firewall\n* loadbalancer\n* manage\\_users\n* objstore\n* provisioning\n* subscriptions\n* subscriptions\\_view\n* support\n* upgrade',
    )


class User(BaseModel):
    user: Optional[User1] = Field(None, description='An array of Users.')


class Startup(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Startup Script.')
    date_created: Optional[str] = Field(
        None, description='The date the Startup Script was created.'
    )
    date_modified: Optional[str] = Field(
        None, description='The date the Startup Script was last modified.'
    )
    name: Optional[str] = Field(
        None, description='The user-supplied name of the Startup Script.'
    )
    script: Optional[str] = Field(
        None, description='The base-64 encoded Startup Script.'
    )
    type: Optional[str] = Field(
        None, description='The Startup Script type.\n\n* boot\n* pxe'
    )


class Ssh(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the SSH Key.')
    date_created: Optional[str] = Field(
        None, description='The date this SSH Key was created.'
    )
    name: Optional[str] = Field(
        None, description='The user-supplied name for this SSH Key.'
    )
    ssh_key: Optional[str] = Field(None, description='The SSH Key.')


class Snapshot(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Snapshot.')
    date_created: Optional[str] = Field(
        None, description='The date this snapshot was created.'
    )
    description: Optional[str] = Field(
        None, description='The user-supplied description of the Snapshot.'
    )
    size: Optional[int] = Field(None, description='The snapshot size in bytes.')
    status: Optional[str] = Field(
        None, description='The Snapshot status.\n\n* pending\n* complete\n* deleted'
    )
    os_id: Optional[int] = Field(
        None,
        description='The [Operating System id](#operation/list-os) for this Snapshot.',
    )
    app_id: Optional[int] = Field(
        None,
        description='The [Application id](#operation/list-applications) for this snapshot.',
    )


class ReservedIp(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Reserved IP.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the Reserved IP is located.',
    )
    ip_type: Optional[str] = Field(
        None, description='The type of IP address.\n\n* v4\n* v6'
    )
    subnet: Optional[str] = Field(None, description='The IP subnet.')
    subnet_size: Optional[int] = Field(None, description='The IP network size in bits.')
    label: Optional[str] = Field(None, description='The user-supplied label.')
    instance_id: Optional[str] = Field(
        None,
        description='The [Instance id](#operation/list-instances) attached to this Reserved IP.',
    )


class Os(BaseModel):
    id: Optional[int] = Field(None, description='The Operating System id.')
    name: Optional[str] = Field(None, description='The Operating System description.')
    arch: Optional[str] = Field(None, description='The Operating System architecture.')
    family: Optional[str] = Field(None, description='The Operating System family. ')


class Application(BaseModel):
    id: Optional[int] = Field(None, description='A unique ID for the application.')
    name: Optional[str] = Field(None, description='The application name.')
    short_name: Optional[str] = Field(None, description='The short application name.')
    deploy_name: Optional[str] = Field(
        None, description='A long description of the application.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of application.\n\n* one-click - use app_id to deploy one-click applications.\n* marketplace - use image_id to deploy marketplace applications.',
    )
    vendor: Optional[str] = Field(None, description='The application vendor name.')
    image_id: Optional[str] = Field(
        None, description='A unique ID for marketplace applications.'
    )


class Account(BaseModel):
    name: Optional[str] = Field(None, description='Your user name.')
    email: Optional[str] = Field(None, description='Your email address.')
    acls: Optional[List[str]] = Field(
        None,
        description='An array of permission granted.\n* manage\\_users\n* subscriptions_view\n* subscriptions\n* billing\n* support\n* provisioning\n* dns\n* abuse\n* upgrade\n* firewall\n* alerts\n* objstore\n* loadbalancer',
    )
    balance: Optional[float] = Field(None, description='Your current account balance.')
    pending_charges: Optional[float] = Field(
        None, description='Unbilled charges for this month.'
    )
    last_payment_date: Optional[str] = Field(
        None, description='Date of your last payment.'
    )
    last_payment_amount: Optional[float] = Field(
        None, description='The amount of your last payment.'
    )


class Backup(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the backup.')
    date_created: Optional[str] = Field(
        None, description='The date the backup was created.'
    )
    description: Optional[str] = Field(
        None, description='The user-supplied description of this backup.'
    )
    size: Optional[int] = Field(None, description='The size of the backup in Bytes.')
    status: Optional[str] = Field(
        None, description='The Backup status.\n\n* complete\n* pending'
    )


class Blockstorage(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Block Storage.')
    cost: Optional[int] = Field(
        None, description='The monthly cost of this Block Storage.'
    )
    status: Optional[str] = Field(
        None, description='The current status of this Block Storage.\n\n* active'
    )
    size_gb: Optional[int] = Field(None, description='Size of the Block Storage in GB.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the Block Storage is located.',
    )
    attached_to_instance: Optional[str] = Field(
        None,
        description='The [Instance id](#operation/list-instances) with this Block Storage attached.',
    )
    date_created: Optional[str] = Field(
        None, description='The date this Block Storage was created.'
    )
    label: Optional[str] = Field(None, description='The user-supplied label.')
    mount_id: Optional[str] = Field(
        None,
        description='An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.',
    )


class FirewallGroup(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Firewall Group.')
    description: Optional[str] = Field(
        None, description='User-supplied description of this Firewall Group.'
    )
    date_created: Optional[str] = Field(
        None, description='Date the Firewall Group was originally created.'
    )
    date_modified: Optional[str] = Field(
        None, description='Date of the last modification to this Firewall Group.'
    )
    instance_count: Optional[int] = Field(
        None, description='The number of instances linked to this Firewall Group.'
    )
    rule_count: Optional[int] = Field(
        None, description='The number of rules in this Firewall Group.'
    )
    max_rule_count: Optional[int] = Field(
        None, description='The maximum number of rules allowed for this Firewall Group.'
    )


class FirewallRule(BaseModel):
    id: Optional[int] = Field(None, description='A unique ID for the Firewall Rule.')
    type: Optional[str] = Field(
        None,
        description='This field is deprecated. Use `ip_type` instead.\n\nThe type of IP rule.\n\n* v4\n* v6',
    )
    ip_type: Optional[str] = Field(
        None, description='The type of IP rule.\n\n* v4\n* v6'
    )
    action: Optional[str] = Field(
        None, description='Action to take when this rule is met.\n\n* accept'
    )
    protocol: Optional[str] = Field(
        None, description='The protocol for this rule.\n\n* ICMP\n* TCP\n* UDP\n* GRE\n'
    )
    port: Optional[str] = Field(None, description='Port or port range for this rule.')
    subnet: Optional[str] = Field(
        None,
        description='IP address representing a subnet. The IP address format must match with the "ip_type" parameter value.',
    )
    subnet_size: Optional[int] = Field(
        None,
        description='The number of bits for the netmask in CIDR notation. Example: 24',
    )
    source: Optional[str] = Field(
        None,
        description='If the source string is given a value of "cloudflare" subnet and subnet_size will both be ignored.\nPossible values:\n\n|   | Value | Description |\n| - | ------ | ------------- |\n|   | "" | Use the value from `subnet` and `subnet_size`. |\n|   | cloudflare | Allow all of Cloudflare\'s IP space through the firewall |',
    )
    notes: Optional[str] = Field(None, description='User-supplied notes for this rule.')


class Iso(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the ISO.')
    date_created: Optional[str] = Field(None, description='Date the ISO was created.')
    filename: Optional[str] = Field(None, description='The ISO filename.')
    size: Optional[int] = Field(None, description='The ISO size in KB.')
    md5sum: Optional[str] = Field(None, description='The calculated md5sum of the ISO.')
    sha512sum: Optional[str] = Field(
        None, description='The calculated sha512sum of the ISO.'
    )
    status: Optional[str] = Field(
        None, description='The current status of the ISO.\n\n* complete\n* pending'
    )


class IsoPublic(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Vultr Public ISO.')
    name: Optional[str] = Field(None, description='The short name of the Public ISO.')
    description: Optional[str] = Field(
        None, description='The long description of the Public ISO.'
    )
    md5sum: Optional[str] = None


class ObjectStorage(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Object Storage.')
    date_created: Optional[str] = Field(
        None, description='Date the Object Store was created.'
    )
    cluster_id: Optional[int] = Field(
        None, description='The [Cluster id](#operation/list-object-storage-clusters).'
    )
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) for this Object Storage.',
    )
    label: Optional[str] = Field(
        None, description='The user-supplied label for this Object Storage.'
    )
    status: Optional[str] = Field(
        None, description='The status of this Object Storage.\n\n* active\n* pending'
    )
    s3_hostname: Optional[str] = Field(
        None,
        description='The [Cluster hostname](#operation/list-object-storage-clusters) for this Object Storage.',
    )
    s3_access_key: Optional[str] = Field(
        None, description='The Object Storage access key.'
    )
    s3_secret_key: Optional[str] = Field(
        None, description='The Object Storage secret key.'
    )


class Clusters(BaseModel):
    id: Optional[int] = Field(
        None, description='A unique ID for the Object Storage cluster.'
    )
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the cluster is located.',
    )
    hostname: Optional[str] = Field(None, description='The cluster host name.')
    deploy: Optional[str] = Field(
        None,
        description='The Cluster is eligible for Object Storage deployment.\n\n* yes\n* no',
    )


class Domain(BaseModel):
    domain: Optional[str] = Field(None, description='Your registered domain name.')
    date_created: Optional[str] = Field(
        None, description='Date the DNS Domain was created.'
    )
    dns_sec: Optional[str] = Field(
        None, description="The domain's DNSSEC status\n\n* enabled\n* disabled"
    )


class DnsSoa(BaseModel):
    nsprimary: Optional[str] = Field(
        None, description='Primary nameserver for this domain.'
    )
    email: Optional[str] = Field(None, description='Domain contact email address.')


class DnsRecord(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the DNS Record.')
    type: Optional[str] = Field(
        None,
        description='The DNS record type.\n\n* A\n* AAAA\n* CNAME\n* NS\n* MX\n* SRV\n* TXT\n* CAA\n* SSHFP',
    )
    name: Optional[str] = Field(None, description='The hostname for this DNS record.')
    data: Optional[str] = Field(None, description='The DNS data for this record type.')
    priority: Optional[int] = Field(
        None, description='DNS priority. Does not apply to all record types.'
    )
    ttl: Optional[int] = Field(None, description='Time to Live in seconds.')


class StickySessions(BaseModel):
    cookie_name: Optional[str] = Field(
        None,
        description='The cookie name to make sticky. See [Load Balancer documentation](https://www.vultr.com/docs/vultr-load-balancers/#Load_Balancer_Configuration).',
    )


class GenericInfo(BaseModel):
    balancing_algorithm: Optional[str] = Field(
        None,
        description='The balancing algorithm.\n\n* roundrobin (default)\n* leastconn',
    )
    ssl_redirect: Optional[bool] = Field(
        None,
        description='If `true`, this will redirect all HTTP traffic to HTTPS. You must have an HTTPS rule and SSL certificate installed on the load balancer to enable this option.\n\n* true\n* false',
    )
    sticky_sessions: Optional[StickySessions] = Field(
        None, description='Array of sticky session cookies.'
    )
    proxy_protocol: Optional[bool] = Field(
        None,
        description='"If `true`, you must configure backend nodes to accept Proxy protocol. \\n\\n* true\\n* false (Default)"',
    )
    private_network: Optional[str] = Field(
        None,
        description='Use `vpc` instead. ID of the private network you wish to use. If private_network is omitted it will default to the public network.',
    )
    vpc: Optional[str] = Field(
        None,
        description='ID of the VPC you wish to use. If a VPC ID is omitted it will default to the public network.',
    )


class HealthCheck(BaseModel):
    protocol: Optional[str] = Field(
        None,
        description='The protocol to use for health checks.\n\n* HTTPS\n* HTTP\n* TCP',
    )
    port: Optional[int] = Field(None, description='The port to use for health checks.')
    path: Optional[str] = Field(
        None,
        description='HTTP Path to check. Only applies if Protocol is HTTP or HTTPS.',
    )
    check_interval: Optional[int] = Field(
        None, description='Interval between health checks.'
    )
    response_timeout: Optional[int] = Field(
        None, description='Timeout before health check fails.'
    )
    unhealthy_threshold: Optional[int] = Field(
        None, description='Number times a check must fail before becoming unhealthy.'
    )
    healthy_threshold: Optional[int] = Field(
        None,
        description='Number of times a check must succeed before returning to healthy status.',
    )


class ForwardRule(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the forwarding rule.')
    frontend_protocol: Optional[str] = Field(
        None,
        description='The protocol on the Load Balancer to forward to the backend.\n\n* HTTP\n* HTTPS\n* TCP',
    )
    frontend_port: Optional[int] = Field(
        None,
        description='The port number on the Load Balancer to forward to the backend.',
    )
    backend_portocol: Optional[str] = Field(
        None,
        description='The protocol destination on the backend server.\n\n* HTTP\n* HTTPS\n* TCP',
    )
    backend_port: Optional[int] = Field(
        None, description='The port number destination on the backend server. '
    )


class FirewallRule1(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the firewall rule.')
    port: Optional[int] = Field(None, description='Port for this rule.')
    source: Optional[str] = Field(
        None,
        description='If the source string is given a value of "cloudflare" then cloudflare IPs will be supplied. Otherwise enter a IP address with subnet size that you wish to permit through the firewall.\n\n  Possible values:\n\n  |   | Value | Description |\n  | - | ------ | ------------- |\n  |   | "192.168.1.1/16" | Ip address with a subnet size. |\n  |   | cloudflare | Allow all of Cloudflare\'s IP space through the firewall |',
    )
    ip_type: Optional[str] = Field(
        None, description='The type of IP rule.\n\n* v4\n* v6\n'
    )


class Loadbalancer(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Load Balancer.')
    date_created: Optional[str] = Field(
        None, description='Date this Load Balancer was created.'
    )
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the Load Balancer is located.',
    )
    label: Optional[str] = Field(
        None, description='The user-supplied label for this load-balancer.'
    )
    status: Optional[str] = Field(None, description='The current status.\n\n* active')
    ipv4: Optional[str] = Field(
        None, description='The IPv4 address of this Load Balancer.'
    )
    ipv6: Optional[str] = Field(
        None, description='The IPv6 address of this Load Balancer.'
    )
    generic_info: Optional[GenericInfo] = Field(
        None, description='An object containing additional options.'
    )
    health_check: Optional[HealthCheck] = Field(
        None,
        description='The health check object configuration. See [Load Balancer documentation](https://www.vultr.com/docs/vultr-load-balancers/#Load_Balancer_Configuration).',
    )
    has_ssl: Optional[bool] = Field(
        None,
        description='Indicates if this Load Balancer has an SSL certificate installed.',
    )
    http2: Optional[bool] = Field(
        None, description='Indicates if this Load Balancer has HTTP2 enabled.'
    )
    forward_rules: Optional[List[ForwardRule]] = Field(
        None, description='An array of forwarding rule objects.'
    )
    instances: Optional[List[str]] = Field(
        None,
        description='Array of [Instance ids](#operation/list-instances) attached to this Load Balancer.',
    )
    firewall_rules: Optional[List[FirewallRule1]] = Field(
        None, description='An array of firewall rule objects.'
    )


class Region(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Region.')
    country: Optional[str] = Field(
        None,
        description='The [two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for this Region.',
    )
    options: Optional[List[str]] = Field(
        None, description='An array of product features available in this Region.'
    )
    continent: Optional[str] = Field(
        None, description='The name of the continent for this Region.'
    )
    city: Optional[str] = Field(
        None, description='The name of the city for this Region.'
    )


class Plans(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Plan.')
    name: Optional[str] = Field(None, description='The Plan name.')
    vcpu_count: Optional[int] = Field(
        None, description='The number of vCPUs in this Plan.'
    )
    ram: Optional[int] = Field(None, description='The amount of RAM in MB.')
    disk: Optional[int] = Field(None, description='The disk size in GB.')
    bandwidth: Optional[int] = Field(
        None, description='The monthly bandwidth quota in GB.'
    )
    monthly_cost: Optional[int] = Field(
        None, description='The monthly cost in US Dollars.'
    )
    type: Optional[str] = Field(
        None,
        description='The plan type.\n\n|   | Type | Description |\n| - | ------ | ------------- |\n|   | vc2 | Cloud Compute |\n|   | vhf | High Frequency Compute |\n|   | vdc | Dedicated Cloud |',
    )
    locations: Optional[List[str]] = Field(
        None, description='An array of Regions where this plan is valid for use.'
    )
    disk_count: Optional[int] = Field(
        None, description='The number of disks that this plan offers.'
    )


class PlansMetal(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Bare Metal Plan.')
    cpu_count: Optional[int] = Field(
        None, description='The number of CPUs in this Plan.'
    )
    cpu_model: Optional[str] = Field(
        None, description='The CPU model type for this instance.'
    )
    cpu_threads: Optional[int] = Field(
        None, description='The numner of supported threads for this instance.'
    )
    ram: Optional[int] = Field(None, description='The amount of RAM in MB.')
    disk: Optional[str] = Field(None, description='The disk size in GB.')
    bandwidth: Optional[int] = Field(
        None, description='The monthly bandwidth quota in GB.'
    )
    locations: Optional[List[str]] = Field(
        None, description='An array of Regions where this plan is valid for use.'
    )
    type: Optional[str] = Field(None, description='The plan type.\n\n* SSD')
    monthly_cost: Optional[int] = Field(
        None, description='The monthly cost in US Dollars.'
    )
    disk_count: Optional[int] = Field(
        None, description='The number of disks that this plan offers.'
    )


class Baremetal(BaseModel):
    id: Optional[str] = Field(
        None, description='A unique ID for the Bare Metal instance.'
    )
    os: Optional[str] = Field(
        None, description='The [Operating System name](#operation/list-os).'
    )
    ram: Optional[str] = Field(
        None, description="Text description of the instances' RAM."
    )
    disk: Optional[str] = Field(
        None, description="Text description of the instances' disk configuration."
    )
    main_ip: Optional[str] = Field(None, description='The main IPv4 address.')
    cpu_count: Optional[int] = Field(None, description='Number of CPUs.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the instance is located.',
    )
    default_password: Optional[str] = Field(
        None, description='The default password assigned at deployment.'
    )
    date_created: Optional[str] = Field(
        None, description='The date this instance was created.'
    )
    status: Optional[str] = Field(
        None, description='The current status.\n\n* active\n* pending\n* suspended'
    )
    netmask_v4: Optional[str] = Field(
        None, description='The IPv4 netmask in dot-decimal notation.'
    )
    gateway_v4: Optional[str] = Field(None, description='The IPv4 gateway address.')
    plan: Optional[str] = Field(
        None,
        description='The [Bare Metal Plan id](#operation/list-metal-plans) used by this instance.',
    )
    label: Optional[str] = Field(
        None, description='The user-supplied label for this instance.'
    )
    tag: Optional[str] = Field(
        None, description='Use `tags` instead. The user-supplied tag for this instance.'
    )
    os_id: Optional[int] = Field(
        None, description='The [Operating System id](#operation/list-os).'
    )
    app_id: Optional[int] = Field(
        None, description='The [Application id](#operation/list-applications).'
    )
    image_id: Optional[str] = Field(
        None, description='The [Application image_id](#operation/list-applications).'
    )
    v6_network: Optional[str] = Field(
        None, description='The IPv6 network size in bits.'
    )
    v6_main_ip: Optional[str] = Field(
        None, description='The main IPv6 network address.'
    )
    v6_network_size: Optional[int] = Field(None, description='The IPv6 subnet.')
    mac_address: Optional[int] = Field(
        None, description='The MAC address for a Bare Metal server'
    )
    tags: Optional[List[str]] = Field(None, description='Tags to apply to the instance')


class BaremetalIpv4(BaseModel):
    ip: Optional[str] = Field(None, description='The IPv4 address.')
    netmask: Optional[str] = Field(
        None, description='The IPv4 netmask in dot-decimal notation.'
    )
    gateway: Optional[str] = Field(None, description='The gateway IP address.')
    type: Optional[str] = Field(
        None, description='The type of IP address.\n\n* main_ip'
    )
    reverse: Optional[str] = Field(
        None, description='The reverse DNS information for this IP address.'
    )
    mac_address: Optional[str] = Field(
        None, description='The MAC address associated with this IP address.'
    )


class BaremetalIpv6(BaseModel):
    ip: Optional[str] = Field(None, description='A unique ID for the IPv6 address.')
    network: Optional[str] = Field(None, description='The IPv6 subnet.')
    network_size: Optional[int] = Field(
        None, description='The IPv6 network size in bits.'
    )
    type: Optional[str] = Field(
        None, description='The type of IP address.\n\n* main_ip'
    )


class Bandwidth(BaseModel):
    incoming_bytes: Optional[int] = Field(
        None,
        description='Total bytes received by this instance on the date (UTC) denoted by the object key.',
    )
    outgoing_bytes: Optional[int] = Field(
        None,
        description='Total bytes sent by this instance on the date (UTC) denoted by the object key.',
    )


class V6Network(BaseModel):
    network: Optional[str] = Field(None, description='The IPv6 subnet.')
    main_ip: Optional[str] = Field(None, description='The main IPv6 network address.')
    network_size: Optional[int] = Field(
        None, description='The IPv6 network size in bits.'
    )


class CreateInstance(BaseModel):
    region: str = Field(description="The Region id where the instance is located.") 
    plan: str = Field(description="The Plan id to use when deploying the instance.")
    os_id: Optional[int] = Field(None, description="The Operating System id to use when deploying this instance.")
    ipxe_chain_url: Optional[str] = Field(None, description="The URL location of the iPXE chainloader.")
    iso_id: Optional[str] = Field(None, description="The ISO id to use when deploying this instance.")
    script_id: Optional[str] = Field(None, description="The Startup Script id to use when deploying this instance.")
    snapshot_id: Optional[str] = Field(None, description="The Snapshot id to use when deploying the instance.")
    enable_ipv6: Optional[bool] = Field(True, description="Enable IPv6.")
    attach_vpc: Optional[List[str]] = Field([], description="An array of VPC IDs to attach to this Instance. This parameter takes precedence over enable_vpc. Please choose one parameter.")
    label: Optional[str] = Field(None, description="A user-supplied label for this instance.")
    sshkey_id: Optional[List[str]] = Field(None, description="The SSH Key id to install on this instance.")
    backups: Optional[str] = Field("disabled", description="Enable automatic backups for the instance.")
    app_id: Optional[int] = Field(None, description="The Application id to use when deploying this instance.")
    image_id: Optional[str] = Field(None, description="The Application image_id to use when deploying this instance.")
    user_data: Optional[str] = Field(None, description="The user-supplied, base64 encoded user data to attach to this instance.")
    ddos_protection: Optional[bool] = Field(False, description="Enable DDoS protection (there is an additional charge for this).")
    activation_email: Optional[bool] = Field(True, description="Notify by email after deployment.")    
    hostname: Optional[str] = Field(None, description="The hostname to use when deploying this instance.")
    firewall_group_id: Optional[str] = Field(None, description="The Firewall Group id to attach to this Instance.")
    reserved_ipv4: Optional[str] = Field(None, description="ID of the floating IP to use as the main IP of this server.")
    enable_vpc: Optional[bool] = Field(False, description=""" If true, VPC support will be added to the new server.
This parameter attaches a single VPC. When no VPC exists in the region, it will be automatically created.
If there are multiple VPCs in the instance's region, use attach_vpc instead to specify a network.""")
    tags: Optional[List[str]] = Field([], description="Tags to apply to the instance.")


class UpdateInstance(BaseModel):
    app_id: Optional[int] = Field(None, description="The Application id to use when deploying this instance.")
    image_id: Optional[str] = Field(None, description="The Application image_id to use when deploying this instance.")
    backups: Optional[str] = Field("disabled", description="Enable automatic backups for the instance.")
    firewall_group_id: Optional[str] = Field(None, description="The Firewall Group id to attach to this Instance.")
    enable_ipv6: Optional[bool] = Field(True, description="Enable IPv6.")
    os_id: Optional[int] = Field(None, description="The Operating System id to use when deploying this instance.")
    user_data: Optional[str] = Field(None, description="The user-supplied, base64 encoded user data to attach to this instance.")
    plan: str = Field(description="The Plan id to use when deploying the instance.")
    ddos_protection: Optional[bool] = Field(False, description="Enable DDoS protection (there is an additional charge for this).")
    attach_vpc: Optional[List[str]] = Field([], description="An array of VPC IDs to attach to this Instance. This parameter takes precedence over enable_vpc. Please choose one parameter.")
    detach_vpc: Optional[List[str]] = Field([], description="An array of VPC IDs to detach from this Instance. This parameter takes precedence over enable_vpc.")
    enable_vpc: Optional[bool] = Field(False, description=""" If true, VPC support will be added to the new server.
This parameter attaches a single VPC. When no VPC exists in the region, it will be automatically created.
If there are multiple VPCs in the instance's region, use attach_vpc instead to specify a network.""")
    label: Optional[str] = Field(None, description="A user-supplied label for this instance.")
    tags: Optional[List[str]] = Field([], description="Tags to apply to the instance.")


class Instance(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the VPS Instance.')
    os: Optional[str] = Field(
        None, description='The [Operating System name](#operation/list-os).'
    )
    ram: Optional[int] = Field(None, description='The amount of RAM in MB.')
    disk: Optional[int] = Field(None, description='The size of the disk in GB.')
    main_ip: Optional[str] = Field(None, description='The main IPv4 address.')
    vcpu_count: Optional[int] = Field(None, description='Number of vCPUs.')
    region: Optional[str] = Field(
        None,
        description='The [Region id](#operation/list-regions) where the Instance is located.',
    )
    default_password: Optional[str] = Field(
        None, description='The default password assigned at deployment.'
    )
    date_created: Optional[str] = Field(
        None, description='The date this instance was created.'
    )
    status: Optional[str] = Field(
        None,
        description='The current status.\n\n* active\n* pending\n* suspended\n* resizing',
    )
    power_status: Optional[str] = Field(
        None, description='The power-on status.\n\n* running\n* stopped'
    )
    server_status: Optional[str] = Field(
        None,
        description='The server health status.\n\n* none\n* locked\n* installingbooting\n* ok',
    )
    allowed_bandwidth: Optional[int] = Field(
        None, description='Monthly bandwidth quota in GB.'
    )
    netmask_v4: Optional[str] = Field(
        None, description='The IPv4 netmask in dot-decimal notation.'
    )
    gateway_v4: Optional[str] = Field(None, description='The gateway IP address.')
    v6_networks: Optional[List[V6Network]] = Field(
        None, description='An array of IPv6 objects.'
    )
    hostname: Optional[str] = Field(None, description='The hostname for this instance.')
    label: Optional[str] = Field(
        None, description='The user-supplied label for this instance.'
    )
    tag: Optional[str] = Field(
        None, description='Use `tags` instead. The user-supplied tag for this instance.'
    )
    internal_ip: Optional[str] = Field(
        None, description='The internal IP used by this instance, if set.'
    )
    kvm: Optional[str] = Field(
        None, description='HTTPS link to the Vultr noVNC Web Console.'
    )
    os_id: Optional[int] = Field(
        None,
        description='The [Operating System id](#operation/list-os) used by this instance.',
    )
    app_id: Optional[int] = Field(
        None,
        description='The [Application id](#operation/list-applications) used by this instance.',
    )
    image_id: Optional[str] = Field(
        None,
        description='The [Application image_id](#operation/list-applications) used by this instance.',
    )
    firewall_group_id: Optional[str] = Field(
        None,
        description='The [Firewall Group id](#operation/list-firewall-groups) linked to this Instance.',
    )
    features: Optional[List[str]] = Field(
        None, description='"auto_backups", "ipv6", "ddos_protection"'
    )
    plan: Optional[str] = Field(None, description='A unique ID for the Plan.')
    tags: Optional[List[str]] = Field(None, description='Tags to apply to the instance')


class PrivateNetworks(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Private Network.')
    mac_address: Optional[str] = Field(None, description='The assigned MAC address.')
    ip_address: Optional[str] = Field(None, description='The assigned IP address.')


class BackupSchedule(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Indicates if backup is enabled:\n\n* true\n* false'
    )
    type: Optional[str] = Field(
        None,
        description='Type of backup schedule:\n\n|   | Value | Description |\n| - | ------ | ------------- |\n|   | daily | Back up once per day at `hour`. |\n|   | weekly | Back up once per week on `dow` at `hour`. |\n|   | monthly | Back up each month at `dom` at `hour`. |\n|   | daily\\_alt\\_even | Back up on even dates at `hour`. |\n|   | daily\\_alt\\_odd | Back up on odd dates at `hour`. |',
    )
    next_scheduled_time_utc: Optional[str] = Field(
        None, description='Time of next backup run in UTC.'
    )
    hour: Optional[int] = Field(None, description='Scheduled hour of day in UTC.')
    dow: Optional[int] = Field(
        None,
        description='Day of week to run.\n\n|   | Value | Description |\n| - | ------ | ------------- |\n|   | 1 | Sunday |\n|   | 2 | Monday |\n|   | 3 | Tuesday |\n|   | 4 | Wednesday |\n|   | 5 | Thursday |\n|   | 6 | Friday |\n|   | 7 | Saturday |',
    )
    dom: Optional[int] = Field(
        None, description='Day of month to run. Use values between 1 and 28.'
    )


class ForwardingRule(BaseModel):
    id: Optional[str] = Field(None, description='A unique ID for the Forwarding Rule.')
    frontend_protocol: Optional[str] = Field(
        None,
        description='The protocol on the Load Balancer to forward to the backend.\n\n* HTTP\n* HTTPS\n* TCP',
    )
    frontend_port: Optional[int] = Field(
        None,
        description='The port number on the Load Balancer to forward to the backend.',
    )
    backend_protocol: Optional[str] = Field(
        None,
        description='The protocol destination on the backend server.\n\n* HTTP\n* HTTPS\n* TCP',
    )
    backend_port: Optional[int] = Field(
        None, description='The port number destination on the backend server.'
    )


class Links(BaseModel):
    next: Optional[str] = Field(None, description='Cursor value for the next page.')
    prev: Optional[str] = Field(None, description='Cursor value for the previous page.')


class Meta(BaseModel):
    total: Optional[int] = Field(
        None,
        description='Total objects available in the list. This value may be greater than the number of objects returned if `per_page` is set.',
    )
    links: Optional[Links] = Field(None, description='Cursor values for pagination.')


class InstanceList(BaseModel):
    instances: Optional[List[Instance]] = Field(None, description="Array of objects (instance) [ items ]")
    meta: Optional[Meta] = Field(None, description="The meta information object. See Meta and Pagination for more information.")


class LoadbalancerFirewallRule(BaseModel):
    id: Optional[constr(min_length=1)] = Field(
        None, description='The unique ID for the firewall rule'
    )
    port: Optional[int] = Field(None, description='Port for this rule.\n')
    source: Optional[constr(min_length=1)] = Field(
        None,
        description='If the source string is given a value of "cloudflare" then cloudflare IPs will be supplied. Otherwise enter a IP address with subnet size that you wish to permit through the firewall.\n\nPossible values:\n\n|   | Value | Description |\n| - | ------ | ------------- |\n|   | "192.168.1.1/16" | Ip address with a subnet size. |\n|   | cloudflare | Allow all of Cloudflare\'s IP space through the firewall |',
    )
    ip_type: Optional[constr(min_length=1)] = Field(
        None, description='The type of IP rule.\n\n* v4\n* v6\n'
    )


class VkeCluster(BaseModel):
    id: Optional[str] = Field(None, description='ID for the VKE cluster')
    label: Optional[str] = Field(None, description='Label for your cluster')
    date_created: Optional[str] = Field(None, description='Date of creation')
    cluster_subnet: Optional[str] = Field(
        None, description='IP range that your pods will run on in this cluster'
    )
    service_subnet: Optional[str] = Field(
        None, description='IP range that services will run on this cluster'
    )
    ip: Optional[str] = Field(
        None, description='IP for your Kubernetes Clusters Control Plane'
    )
    endpoint: Optional[str] = Field(
        None, description='Domain for your Kubernetes Clusters Control Plane'
    )
    version: Optional[str] = Field(
        None, description='Version of Kubernetes this cluster is running on'
    )
    region: Optional[str] = Field(
        None, description='Region this Kubernetes Cluster is running in'
    )
    status: Optional[str] = Field(None, description='Status for VKE cluster')
    node_pools: Optional[List[Nodepools]] = Field(
        None, description='NodePools in this cluster'
    )

